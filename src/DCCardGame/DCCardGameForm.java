package DCCardGame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;


/******************************************************************************
 * @author Logan Fernandes
 *****************************************************************************/
public class DCCardGameForm extends javax.swing.JFrame {
    Card heroCard;
    Card slot1Card, slot2Card, slot3Card, slot4Card, slot5Card;
    Card extraLineupSlot1Card, extraLineupSlot2Card, extraLineupSlot3Card, extraLineupSlot4Card, extraLineupSlot5Card;
    Card playerHandSlot1Card, playerHandSlot2Card, playerHandSlot3Card, playerHandSlot4Card, playerHandSlot5Card;
    Card kickSlotCard, discardSlot, weaknessSlot, superHeroCard, superVillainCard;
    static int player_1_deckScore;
    static int player_1_currentPower;
    Card noCard = Deck.noCard();
    Card noDiscard = Deck.noDiscard();
    ImageIcon emptySuperVillainSlot =  new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Empty Super Villain Deck.png");
    ImageIcon emptyCardSlot = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Empty Card Slot.png");
    ImageIcon emptyDiscardSlot = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Empty Discard.png");
    ImageIcon emptyKickDeckSlot = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Kick Deck Empty.png");
    ImageIcon cardBack = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Card Back.png");
    ImageIcon superHeroBack = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Super Hero Back.png");    
    ImageIcon playerDeckEmpty = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Empty Player Deck.png");
    static ArrayList<Card> cards = Deck.buildMainDeck();    
    static Card kickCard = Deck.buildInfinitedKickDeck();
    static ArrayList<Card> standardKickDeck = Deck.buildStandardKickDeck();
    static Card weaknessCard = Deck.buildInfiniteWeaknessDeck();
    static ArrayList<Card> standardWeaknessDeck = Deck.buildStandardWeaknessDeck();
    static ArrayList<Card> standardSuperVillainDeck = Deck.buildSuperVillainDeck();
    static ArrayList<Card> standardSuperHeroDeck = Deck.buildSuperHeroDeck();
    static ArrayList<Card> player_1_deck = new PlayerDeck().playerDeck();
    static ArrayList<Card> player_1_discard = new ArrayList<>();
    static ArrayList<Card> player_1_hand = new ArrayList<>();
    static ArrayList<Card> player_1_tableCards = new ArrayList<>();
    Component mouseClick;

    
    /** Creates new form DCCardGameForm */
    public DCCardGameForm() {
        initComponents();
        this.getContentPane().setBackground(new Color(106,106,117));
        playerHandPanel.setLayout(new GridLayout(1,0, 5, 5));
        tableCardsPanel.setLayout(new GridLayout(0,5,5,5));
        slot1Card = noCard;
        slot2Card = noCard;
        slot3Card = noCard;
        slot4Card = noCard;
        slot5Card = noCard;
        discardSlot = noDiscard;
        superVillainCard = DrawCards.drawFromSuperVillainDeck();
        superVillainDeckLabel.setToolTipText(superVillainCard.getCardText());
        player_1_deckScore = 0;
        player_1_currentPower = 0;
        playerHandScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        extraLineupScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        //tableCardsScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        //discardPile.setToolTipText("<html><body><img src= 'file:///C:/DC%20Card%20Game/src/DCCardGame/resources/Super%20Villains/Atrocitus.png' width=300 height=422>");
    }

    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always 
     * regenerated by the Form Editor.*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        mainDeckPeekBtn = new javax.swing.JButton();
        deckPeekBtn = new javax.swing.JButton();
        currentPowerLabel = new javax.swing.JLabel();
        deckScoreLabel = new javax.swing.JLabel();
        currentPowerTextBox = new javax.swing.JTextField();
        deckScoreTextBox = new javax.swing.JTextField();
        drawWeaknessBtn = new javax.swing.JButton();
        destroyCardBtn = new javax.swing.JButton();
        discardCardBtn = new javax.swing.JButton();
        searchDiscardsBtn = new javax.swing.JButton();
        discardHandBtn = new javax.swing.JButton();
        mainDeckDrawBtn = new javax.swing.JButton();
        printDeckBtn = new javax.swing.JButton();
        printDiscardsBtn = new javax.swing.JButton();
        addToLineupBtn = new javax.swing.JButton();
        drawCardBtn = new javax.swing.JButton();
        moveTableCardsToDiscardBtn = new javax.swing.JButton();
        lineupPanel = new javax.swing.JPanel();
        lineupSlot1Panel = new javax.swing.JPanel();
        lineupSlot1Label = new javax.swing.JLabel();
        lineupSlot2Panel = new javax.swing.JPanel();
        lineupSlot2Label = new javax.swing.JLabel();
        lineupSlot3Panel = new javax.swing.JPanel();
        lineupSlot3Label = new javax.swing.JLabel();
        lineupSlot4Panel = new javax.swing.JPanel();
        lineupSlot4Label = new javax.swing.JLabel();
        lineupSlot5Panel = new javax.swing.JPanel();
        lineupSlot5Label = new javax.swing.JLabel();
        mainDeckMainPanel = new javax.swing.JPanel();
        mainDeckPanel = new javax.swing.JPanel();
        mainDeckLabel = new javax.swing.JLabel();
        kickDeckMainPanel = new javax.swing.JPanel();
        kickDeckPanel = new javax.swing.JPanel();
        kickDeckLabel = new javax.swing.JLabel();
        superVillainDeckMainPanel = new javax.swing.JPanel();
        superVillainDeckPanel = new javax.swing.JPanel();
        superVillainDeckLabel = new javax.swing.JLabel();
        superHeroMainPanel = new javax.swing.JPanel();
        superHeroPanel = new javax.swing.JPanel();
        superHeroSlotLabel = new javax.swing.JLabel();
        playerDeckMainPanel = new javax.swing.JPanel();
        discardsPanel = new javax.swing.JPanel();
        discardsLabel = new javax.swing.JLabel();
        playerDeckPanel = new javax.swing.JPanel();
        playerDeckLabel = new javax.swing.JLabel();
        extraLineupScrollPane = new javax.swing.JScrollPane();
        extraLineupPanel = new javax.swing.JPanel();
        extraLineupSlot1Label = new javax.swing.JLabel();
        playerHandMainPanel = new javax.swing.JPanel();
        playerHandScrollPane = new javax.swing.JScrollPane();
        playerHandPanel = new javax.swing.JPanel();
        tableCardsMainPanel = new javax.swing.JPanel();
        tableCardsScrollPane = new javax.swing.JScrollPane();
        tableCardsPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        exitGameMenuItem = new javax.swing.JMenuItem();
        rulesMenu = new javax.swing.JMenu();
        standardRulesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        twoSuperHeroesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        instantRefillCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        instantVillainCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        infiniteKicksCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        infiniteWeaknessCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(125, 141, 179));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        controlPanel.setBackground(new java.awt.Color(144, 154, 178));
        controlPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mainDeckPeekBtn.setText("Main Deck Peek");

        deckPeekBtn.setText("Deck Peek");

        currentPowerLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        currentPowerLabel.setText("Current Power");

        deckScoreLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deckScoreLabel.setText("Deck Score");

        currentPowerTextBox.setEditable(false);
        currentPowerTextBox.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        currentPowerTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        currentPowerTextBox.setText("0");

        deckScoreTextBox.setEditable(false);
        deckScoreTextBox.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        deckScoreTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deckScoreTextBox.setText("0");

        drawWeaknessBtn.setText("Draw Weakness");
        drawWeaknessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawWeaknessBtnActionPerformed(evt);
            }
        });

        destroyCardBtn.setText("Destroy Cards");

        discardCardBtn.setText("Discard Card");

        searchDiscardsBtn.setText("Search Discards");

        discardHandBtn.setText("Discard Hand");

        mainDeckDrawBtn.setText("Main Deck Draw");

        printDeckBtn.setText("printDeckButton");
        printDeckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printDeckBtnActionPerformed(evt);
            }
        });

        printDiscardsBtn.setText("printDiscards");
        printDiscardsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printDiscardsBtnActionPerformed(evt);
            }
        });

        addToLineupBtn.setText("Add to Lineup");
        addToLineupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToLineupBtnActionPerformed(evt);
            }
        });

        drawCardBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        drawCardBtn.setText("Draw Single Card");
        drawCardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCardBtnActionPerformed(evt);
            }
        });

        moveTableCardsToDiscardBtn.setText("Clear Cards from Table");
        moveTableCardsToDiscardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTableCardsToDiscardBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentPowerTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(currentPowerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(deckScoreLabel)))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deckScoreTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deckPeekBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(destroyCardBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addToLineupBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moveTableCardsToDiscardBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(drawWeaknessBtn)
                                    .addComponent(discardHandBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mainDeckDrawBtn)
                                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(searchDiscardsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(discardCardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(printDeckBtn)
                                    .addComponent(printDiscardsBtn))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                                .addComponent(mainDeckPeekBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5))))
                    .addComponent(drawCardBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentPowerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentPowerTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deckScoreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deckScoreTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(printDiscardsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printDeckBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(discardCardBtn)
                .addGap(7, 7, 7)
                .addComponent(searchDiscardsBtn)
                .addGap(18, 18, 18)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainDeckDrawBtn)
                    .addComponent(moveTableCardsToDiscardBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawWeaknessBtn)
                    .addComponent(addToLineupBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(discardHandBtn)
                    .addComponent(destroyCardBtn))
                .addGap(7, 7, 7)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainDeckPeekBtn)
                    .addComponent(deckPeekBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(drawCardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lineupPanel.setBackground(new java.awt.Color(144, 154, 178));
        lineupPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lineupSlot1Panel.setBackground(new java.awt.Color(144, 154, 178));
        lineupSlot1Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lineupSlot1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Card Slot.png"))); // NOI18N
        lineupSlot1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineupSlot1LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineupSlot1PanelLayout = new javax.swing.GroupLayout(lineupSlot1Panel);
        lineupSlot1Panel.setLayout(lineupSlot1PanelLayout);
        lineupSlot1PanelLayout.setHorizontalGroup(
            lineupSlot1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot1PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot1Label)
                .addGap(5, 5, 5))
        );
        lineupSlot1PanelLayout.setVerticalGroup(
            lineupSlot1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot1PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        lineupSlot2Panel.setBackground(new java.awt.Color(144, 154, 178));
        lineupSlot2Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lineupSlot2Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Card Slot.png"))); // NOI18N
        lineupSlot2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineupSlot2LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineupSlot2PanelLayout = new javax.swing.GroupLayout(lineupSlot2Panel);
        lineupSlot2Panel.setLayout(lineupSlot2PanelLayout);
        lineupSlot2PanelLayout.setHorizontalGroup(
            lineupSlot2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot2PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot2Label)
                .addGap(5, 5, 5))
        );
        lineupSlot2PanelLayout.setVerticalGroup(
            lineupSlot2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot2PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        lineupSlot3Panel.setBackground(new java.awt.Color(144, 154, 178));
        lineupSlot3Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lineupSlot3Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Card Slot.png"))); // NOI18N
        lineupSlot3Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineupSlot3LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineupSlot3PanelLayout = new javax.swing.GroupLayout(lineupSlot3Panel);
        lineupSlot3Panel.setLayout(lineupSlot3PanelLayout);
        lineupSlot3PanelLayout.setHorizontalGroup(
            lineupSlot3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot3PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot3Label)
                .addGap(5, 5, 5))
        );
        lineupSlot3PanelLayout.setVerticalGroup(
            lineupSlot3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot3PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot3Label)
                .addGap(5, 5, 5))
        );

        lineupSlot4Panel.setBackground(new java.awt.Color(144, 154, 178));
        lineupSlot4Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lineupSlot4Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Card Slot.png"))); // NOI18N
        lineupSlot4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineupSlot4LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineupSlot4PanelLayout = new javax.swing.GroupLayout(lineupSlot4Panel);
        lineupSlot4Panel.setLayout(lineupSlot4PanelLayout);
        lineupSlot4PanelLayout.setHorizontalGroup(
            lineupSlot4PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot4PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot4Label)
                .addGap(5, 5, 5))
        );
        lineupSlot4PanelLayout.setVerticalGroup(
            lineupSlot4PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lineupSlot4PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot4Label))
        );

        lineupSlot5Panel.setBackground(new java.awt.Color(144, 154, 178));
        lineupSlot5Panel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lineupSlot5Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Card Slot.png"))); // NOI18N
        lineupSlot5Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineupSlot5LabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineupSlot5PanelLayout = new javax.swing.GroupLayout(lineupSlot5Panel);
        lineupSlot5Panel.setLayout(lineupSlot5PanelLayout);
        lineupSlot5PanelLayout.setHorizontalGroup(
            lineupSlot5PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot5PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot5Label)
                .addGap(5, 5, 5))
        );
        lineupSlot5PanelLayout.setVerticalGroup(
            lineupSlot5PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupSlot5PanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lineupSlot5Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout lineupPanelLayout = new javax.swing.GroupLayout(lineupPanel);
        lineupPanel.setLayout(lineupPanelLayout);
        lineupPanelLayout.setHorizontalGroup(
            lineupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lineupSlot1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lineupSlot2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lineupSlot3Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lineupSlot4Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lineupSlot5Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        lineupPanelLayout.setVerticalGroup(
            lineupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineupPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(lineupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lineupSlot4Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lineupSlot1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineupSlot5Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lineupSlot3Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lineupSlot2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        mainDeckMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        mainDeckMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        mainDeckPanel.setBackground(new java.awt.Color(144, 154, 178));
        mainDeckPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mainDeckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Card Back.png"))); // NOI18N
        mainDeckLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainDeckLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mainDeckPanelLayout = new javax.swing.GroupLayout(mainDeckPanel);
        mainDeckPanel.setLayout(mainDeckPanelLayout);
        mainDeckPanelLayout.setHorizontalGroup(
            mainDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(mainDeckLabel)
                .addGap(5, 5, 5))
        );
        mainDeckPanelLayout.setVerticalGroup(
            mainDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(mainDeckLabel)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout mainDeckMainPanelLayout = new javax.swing.GroupLayout(mainDeckMainPanel);
        mainDeckMainPanel.setLayout(mainDeckMainPanelLayout);
        mainDeckMainPanelLayout.setHorizontalGroup(
            mainDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mainDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        mainDeckMainPanelLayout.setVerticalGroup(
            mainDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mainDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        kickDeckMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        kickDeckMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        kickDeckPanel.setBackground(new java.awt.Color(144, 154, 178));
        kickDeckPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        kickDeckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Kick/Kick.png"))); // NOI18N
        kickDeckLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                kickDeckLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                kickDeckLabelMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout kickDeckPanelLayout = new javax.swing.GroupLayout(kickDeckPanel);
        kickDeckPanel.setLayout(kickDeckPanelLayout);
        kickDeckPanelLayout.setHorizontalGroup(
            kickDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kickDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(kickDeckLabel)
                .addGap(5, 5, 5))
        );
        kickDeckPanelLayout.setVerticalGroup(
            kickDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kickDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(kickDeckLabel)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout kickDeckMainPanelLayout = new javax.swing.GroupLayout(kickDeckMainPanel);
        kickDeckMainPanel.setLayout(kickDeckMainPanelLayout);
        kickDeckMainPanelLayout.setHorizontalGroup(
            kickDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kickDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(kickDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        kickDeckMainPanelLayout.setVerticalGroup(
            kickDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, kickDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(kickDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        superVillainDeckMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        superVillainDeckMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        superVillainDeckPanel.setBackground(new java.awt.Color(144, 154, 178));
        superVillainDeckPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        superVillainDeckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Super Villains/Ra's Al Ghul.png"))); // NOI18N
        superVillainDeckLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                superVillainDeckLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout superVillainDeckPanelLayout = new javax.swing.GroupLayout(superVillainDeckPanel);
        superVillainDeckPanel.setLayout(superVillainDeckPanelLayout);
        superVillainDeckPanelLayout.setHorizontalGroup(
            superVillainDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superVillainDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(superVillainDeckLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        superVillainDeckPanelLayout.setVerticalGroup(
            superVillainDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, superVillainDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(superVillainDeckLabel)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout superVillainDeckMainPanelLayout = new javax.swing.GroupLayout(superVillainDeckMainPanel);
        superVillainDeckMainPanel.setLayout(superVillainDeckMainPanelLayout);
        superVillainDeckMainPanelLayout.setHorizontalGroup(
            superVillainDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superVillainDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superVillainDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        superVillainDeckMainPanelLayout.setVerticalGroup(
            superVillainDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, superVillainDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superVillainDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        superHeroMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        superHeroMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        superHeroPanel.setBackground(new java.awt.Color(144, 154, 178));
        superHeroPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        superHeroSlotLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Super Hero Back.png"))); // NOI18N
        superHeroSlotLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                superHeroSlotLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout superHeroPanelLayout = new javax.swing.GroupLayout(superHeroPanel);
        superHeroPanel.setLayout(superHeroPanelLayout);
        superHeroPanelLayout.setHorizontalGroup(
            superHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superHeroPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superHeroSlotLabel)
                .addGap(10, 10, 10))
        );
        superHeroPanelLayout.setVerticalGroup(
            superHeroPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superHeroPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superHeroSlotLabel)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout superHeroMainPanelLayout = new javax.swing.GroupLayout(superHeroMainPanel);
        superHeroMainPanel.setLayout(superHeroMainPanelLayout);
        superHeroMainPanelLayout.setHorizontalGroup(
            superHeroMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superHeroMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        superHeroMainPanelLayout.setVerticalGroup(
            superHeroMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(superHeroMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(superHeroPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        playerDeckMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        playerDeckMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        discardsPanel.setBackground(new java.awt.Color(144, 154, 178));
        discardsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        discardsLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Empty Discard.png"))); // NOI18N

        javax.swing.GroupLayout discardsPanelLayout = new javax.swing.GroupLayout(discardsPanel);
        discardsPanel.setLayout(discardsPanelLayout);
        discardsPanelLayout.setHorizontalGroup(
            discardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, discardsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(discardsLabel)
                .addGap(5, 5, 5))
        );
        discardsPanelLayout.setVerticalGroup(
            discardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, discardsPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(discardsLabel)
                .addGap(5, 5, 5))
        );

        playerDeckPanel.setBackground(new java.awt.Color(144, 154, 178));
        playerDeckPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        playerDeckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Card Back.png"))); // NOI18N
        playerDeckLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerDeckLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout playerDeckPanelLayout = new javax.swing.GroupLayout(playerDeckPanel);
        playerDeckPanel.setLayout(playerDeckPanelLayout);
        playerDeckPanelLayout.setHorizontalGroup(
            playerDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(playerDeckLabel)
                .addGap(5, 5, 5))
        );
        playerDeckPanelLayout.setVerticalGroup(
            playerDeckPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerDeckPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(playerDeckLabel)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout playerDeckMainPanelLayout = new javax.swing.GroupLayout(playerDeckMainPanel);
        playerDeckMainPanel.setLayout(playerDeckMainPanelLayout);
        playerDeckMainPanelLayout.setHorizontalGroup(
            playerDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerDeckMainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(discardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerDeckMainPanelLayout.setVerticalGroup(
            playerDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerDeckMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerDeckMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerDeckPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(discardsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        extraLineupPanel.setBackground(new java.awt.Color(106, 106, 117));
        extraLineupPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));

        extraLineupSlot1Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DCCardGame/resources/Other Cards/Blank Card.png"))); // NOI18N

        javax.swing.GroupLayout extraLineupPanelLayout = new javax.swing.GroupLayout(extraLineupPanel);
        extraLineupPanel.setLayout(extraLineupPanelLayout);
        extraLineupPanelLayout.setHorizontalGroup(
            extraLineupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extraLineupPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(extraLineupSlot1Label)
                .addGap(5, 5, 5))
        );
        extraLineupPanelLayout.setVerticalGroup(
            extraLineupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extraLineupPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(extraLineupSlot1Label)
                .addGap(5, 5, 5))
        );

        extraLineupScrollPane.setViewportView(extraLineupPanel);

        playerHandMainPanel.setBackground(new java.awt.Color(144, 154, 178));
        playerHandMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        playerHandPanel.setBackground(new java.awt.Color(144, 154, 178));
        playerHandPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));

        javax.swing.GroupLayout playerHandPanelLayout = new javax.swing.GroupLayout(playerHandPanel);
        playerHandPanel.setLayout(playerHandPanelLayout);
        playerHandPanelLayout.setHorizontalGroup(
            playerHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 982, Short.MAX_VALUE)
        );
        playerHandPanelLayout.setVerticalGroup(
            playerHandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 231, Short.MAX_VALUE)
        );

        playerHandScrollPane.setViewportView(playerHandPanel);

        javax.swing.GroupLayout playerHandMainPanelLayout = new javax.swing.GroupLayout(playerHandMainPanel);
        playerHandMainPanel.setLayout(playerHandMainPanelLayout);
        playerHandMainPanelLayout.setHorizontalGroup(
            playerHandMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerHandMainPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(playerHandScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        playerHandMainPanelLayout.setVerticalGroup(
            playerHandMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerHandMainPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(playerHandScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tableCardsMainPanel.setBackground(new java.awt.Color(106, 106, 117));

        tableCardsScrollPane.setBackground(new java.awt.Color(106, 106, 117));

        tableCardsPanel.setBackground(new java.awt.Color(106, 106, 117));
        tableCardsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));

        javax.swing.GroupLayout tableCardsPanelLayout = new javax.swing.GroupLayout(tableCardsPanel);
        tableCardsPanel.setLayout(tableCardsPanelLayout);
        tableCardsPanelLayout.setHorizontalGroup(
            tableCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 929, Short.MAX_VALUE)
        );
        tableCardsPanelLayout.setVerticalGroup(
            tableCardsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );

        tableCardsScrollPane.setViewportView(tableCardsPanel);

        javax.swing.GroupLayout tableCardsMainPanelLayout = new javax.swing.GroupLayout(tableCardsMainPanel);
        tableCardsMainPanel.setLayout(tableCardsMainPanelLayout);
        tableCardsMainPanelLayout.setHorizontalGroup(
            tableCardsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableCardsMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableCardsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tableCardsMainPanelLayout.setVerticalGroup(
            tableCardsMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableCardsMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableCardsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");

        newGameMenuItem.setText("New Game");
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newGameMenuItem);

        exitGameMenuItem.setText("Exit");
        exitGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitGameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitGameMenuItem);

        menuBar.add(fileMenu);

        rulesMenu.setText("Rules");

        standardRulesCheckBoxMenuItem.setSelected(true);
        standardRulesCheckBoxMenuItem.setText("Standard Rules");
        rulesMenu.add(standardRulesCheckBoxMenuItem);

        twoSuperHeroesCheckBoxMenuItem.setText("Two Super Heroes");
        rulesMenu.add(twoSuperHeroesCheckBoxMenuItem);

        instantRefillCheckBoxMenuItem3.setText("Instant Lineup Refills");
        rulesMenu.add(instantRefillCheckBoxMenuItem3);

        instantVillainCheckBoxMenuItem.setText("Instant Villain Refill");
        rulesMenu.add(instantVillainCheckBoxMenuItem);

        infiniteKicksCheckBoxMenuItem.setText("Infinite Kicks");
        rulesMenu.add(infiniteKicksCheckBoxMenuItem);

        infiniteWeaknessCheckBoxMenuItem.setText("Infinite Weaknesses");
        rulesMenu.add(infiniteWeaknessCheckBoxMenuItem);

        menuBar.add(rulesMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(lineupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(extraLineupScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(superVillainDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(superHeroMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playerHandMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(playerDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(kickDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(tableCardsMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(superVillainDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(mainDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lineupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(extraLineupScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(kickDeckMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 174, Short.MAX_VALUE))
                            .addComponent(tableCardsMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(superHeroMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerHandMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerDeckMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainDeckLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainDeckLabelMouseClicked
        ImageIcon mainDeckEmpty = new ImageIcon("C:\\DC Card Game\\src\\DCCardGame\\resources\\Other Cards\\Empty Main Deck.png");

        String message = "The Main Deck is empty!";
        String title = "Main Deck Empty";
        
        checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
        
        if (slot1Card == noCard)
        {
            if (!DrawCards.cards.isEmpty())
            {
                slot1Card = drawAndChangeLineupCard(slot1Card, lineupSlot1Label, DrawCards.drawFromMainDeck());
                checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
            }
        } 
        if (slot2Card == noCard)
        {
            if (!DrawCards.cards.isEmpty())
            {
                slot2Card = drawAndChangeLineupCard(slot2Card, lineupSlot2Label, DrawCards.drawFromMainDeck());
                checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
            }
        }     
        if (slot3Card == noCard)
        {
            if (!DrawCards.cards.isEmpty())
            {
                slot3Card = drawAndChangeLineupCard(slot3Card, lineupSlot3Label, DrawCards.drawFromMainDeck());
                checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
            }
        }
        if (slot4Card == noCard)
        {
            if (!DrawCards.cards.isEmpty())
            {
                slot4Card = drawAndChangeLineupCard(slot4Card, lineupSlot4Label, DrawCards.drawFromMainDeck());
                checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
            }
        }
        if (slot5Card == noCard)
        {
            if (!DrawCards.cards.isEmpty())
            {
                slot5Card = drawAndChangeLineupCard(slot5Card, lineupSlot5Label, DrawCards.drawFromMainDeck());
                checkForEmptyCard(DrawCards.cards, mainDeckLabel, mainDeckEmpty, message, title);
            }
        }        
    }//GEN-LAST:event_mainDeckLabelMouseClicked

    private void lineupSlot1LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineupSlot1LabelMouseClicked
        if (slot1Card != noCard)
        {
            slot1Card = buyLineupCard(slot1Card, lineupSlot1Label, discardsLabel, emptyCardSlot);
        }

    }//GEN-LAST:event_lineupSlot1LabelMouseClicked

    private void printDeckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printDeckBtnActionPerformed
       for (Card d : player_1_deck)
           System.out.println(d.toString());
    }//GEN-LAST:event_printDeckBtnActionPerformed

    private void lineupSlot2LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineupSlot2LabelMouseClicked
        if (slot2Card != noCard)
        {
            slot2Card = buyLineupCard(slot2Card, lineupSlot2Label, discardsLabel, emptyCardSlot);
        }
    }//GEN-LAST:event_lineupSlot2LabelMouseClicked

    private void lineupSlot3LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineupSlot3LabelMouseClicked
        if (slot3Card != noCard)
        { 
            slot3Card = buyLineupCard(slot3Card, lineupSlot3Label, discardsLabel, emptyCardSlot);
        }
    }//GEN-LAST:event_lineupSlot3LabelMouseClicked

    private void lineupSlot4LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineupSlot4LabelMouseClicked
        if (slot4Card != noCard)
        {
            slot4Card = buyLineupCard(slot4Card, lineupSlot4Label, discardsLabel, emptyCardSlot);
        }
    }//GEN-LAST:event_lineupSlot4LabelMouseClicked

    private void lineupSlot5LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineupSlot5LabelMouseClicked
        if (slot5Card != noCard)
        {
            slot5Card = buyLineupCard(slot5Card, lineupSlot5Label, discardsLabel, emptyCardSlot);
        }
    }//GEN-LAST:event_lineupSlot5LabelMouseClicked

    private void kickDeckLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kickDeckLabelMouseClicked
        if (standardRulesCheckBoxMenuItem.isSelected() && !infiniteKicksCheckBoxMenuItem.isSelected())
        {
            String message = "The Kick deck is empty!";
            String title = "Kick Deck Empty";
            checkForEmptyCard(DrawCards.standardKickDeck, kickDeckLabel, emptyKickDeckSlot, message, title);
            if (!DrawCards.standardKickDeck.isEmpty())
            {
                kickSlotCard = drawAndChangeLineupCard(kickSlotCard, kickDeckLabel, DrawCards.drawFromKickDeck());
                buyKickOrWeakness(kickSlotCard, discardsLabel);
                checkForEmptyCard(DrawCards.standardKickDeck, kickDeckLabel, emptyKickDeckSlot, message, title);
            }
        }
         
        if (infiniteKicksCheckBoxMenuItem.isSelected())
        {
            kickSlotCard = drawAndChangeLineupCard(kickSlotCard, kickDeckLabel, DrawCards.drawFromInfiniteKickDeck());
            buyKickOrWeakness(kickSlotCard, discardsLabel);
        }
    }//GEN-LAST:event_kickDeckLabelMouseClicked

    private void exitGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitGameMenuItemActionPerformed
       System.exit(0);
    }//GEN-LAST:event_exitGameMenuItemActionPerformed

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        //this is the code to reset the game back to the New Game State
        slot1Card = noCard;
        slot2Card = noCard;
        slot3Card = noCard;
        slot4Card = noCard;
        slot5Card = noCard;
        discardSlot = noDiscard;
        lineupSlot1Label.setIcon(emptyCardSlot);
        lineupSlot2Label.setIcon(emptyCardSlot);
        lineupSlot3Label.setIcon(emptyCardSlot);
        lineupSlot4Label.setIcon(emptyCardSlot);
        lineupSlot5Label.setIcon(emptyCardSlot);
        discardsLabel.setIcon(emptyDiscardSlot);
        kickSlotCard = DrawCards.drawFromInfiniteKickDeck();
        weaknessSlot = DrawCards.drawFromInfiniteWeaknessDeck();
        kickDeckLabel.setIcon(new ImageIcon(kickSlotCard.getImage())); 
        player_1_deck = new PlayerDeck().playerDeck();
        player_1_discard = new ArrayList<>();
        
        mainDeckLabel.setIcon(cardBack);
        superHeroSlotLabel.setIcon(superHeroBack);
        
        cards = Deck.buildMainDeck();    
        kickCard = Deck.buildInfinitedKickDeck();
        standardKickDeck = Deck.buildStandardKickDeck();
        weaknessCard = Deck.buildInfiniteWeaknessDeck();
        standardWeaknessDeck = Deck.buildStandardWeaknessDeck();
        
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    private void drawWeaknessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawWeaknessBtnActionPerformed
        if (standardRulesCheckBoxMenuItem.isSelected() && !infiniteWeaknessCheckBoxMenuItem.isSelected())
        {
            String message = "The Weakness deck is empty!";
            String title = "Weakness Deck Empty";
            if (DrawCards.standardWeaknessDeck.isEmpty())
            {
                JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
            }

            if (!DrawCards.standardWeaknessDeck.isEmpty())
            {
                weaknessSlot = DrawCards.drawFromWeaknessDeck();
                buyKickOrWeakness(weaknessSlot, discardsLabel);
                if (DrawCards.standardWeaknessDeck.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                }
            }
        }
         
        if (infiniteWeaknessCheckBoxMenuItem.isSelected())
        {
             weaknessSlot = DrawCards.drawFromInfiniteWeaknessDeck();
             buyKickOrWeakness(weaknessSlot, discardsLabel);
        }
    }//GEN-LAST:event_drawWeaknessBtnActionPerformed

    private void superVillainDeckLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_superVillainDeckLabelMouseClicked
        if (standardRulesCheckBoxMenuItem.isSelected() && !instantVillainCheckBoxMenuItem.isSelected())
        {
            if (!DrawCards.standardSuperVillainDeck.isEmpty())
            {
                if (superVillainCard == noCard)
                {
                    superVillainCard = drawAndChangeLineupCard(superVillainCard, superVillainDeckLabel, DrawCards.drawFromSuperVillainDeck());
                    if (DrawCards.standardSuperVillainDeck.isEmpty())
                    {
                        superVillainDeckLabel.setIcon(new ImageIcon (superVillainCard.getImage()));
                        superVillainDeckLabel.setToolTipText(superVillainCard.getCardText());
                    }
                }
                else
                {
                    if (!DrawCards.standardSuperVillainDeck.isEmpty())
                    {
                        superVillainCard = buyLineupCard(superVillainCard, superVillainDeckLabel, discardsLabel, cardBack);
                        superVillainDeckLabel.setToolTipText(null);
                        if (DrawCards.standardSuperVillainDeck.isEmpty())
                        {
                            superVillainDeckLabel.setIcon(emptySuperVillainSlot);
                            superVillainDeckLabel.setToolTipText(superVillainCard.getCardText());
                        }
                    }
                }           
            }
            else
            {
                if (superVillainCard == null)
                {
                    String message = "The Super Villain deck is empty!";
                    String title = "Super Villain Deck Empty";
                    JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
                }
                else
                {
                    superVillainCard = buyLineupCard(superVillainCard, superVillainDeckLabel, discardsLabel, emptySuperVillainSlot);
                    superVillainCard = null;
                    superVillainDeckLabel.setToolTipText(null);
                }
            }
        }
    }//GEN-LAST:event_superVillainDeckLabelMouseClicked

    private void superHeroSlotLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_superHeroSlotLabelMouseClicked
        if (!DrawCards.standardSuperHeroDeck.isEmpty())
        {
            superHeroCard = DrawCards.drawFromSuperHeroDeck();
            superHeroSlotLabel.setIcon(new ImageIcon(superHeroCard.getImage()));
            superHeroSlotLabel.setToolTipText(superHeroCard.getCardText());
        }
        else
        {
            String message = "The Super Hero deck is empty!";
            String title = "Super Hero Deck Empty";
            JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_superHeroSlotLabelMouseClicked

    private void kickDeckLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kickDeckLabelMouseEntered
           if (DrawCards.standardKickDeck.isEmpty())
           {
               kickSlotCard = noCard;
               kickDeckLabel.setToolTipText(kickSlotCard.getCardText());
           }
           
           if (!DrawCards.standardKickDeck.isEmpty())
           {
               kickSlotCard = DrawCards.drawFromInfiniteKickDeck();
               kickDeckLabel.setToolTipText(kickSlotCard.getCardText());
           }
    }//GEN-LAST:event_kickDeckLabelMouseEntered

    private void printDiscardsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printDiscardsBtnActionPerformed
        for (Card d : player_1_discard)
           System.out.println(d.toString());
    }//GEN-LAST:event_printDiscardsBtnActionPerformed

    private void playerDeckLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerDeckLabelMouseClicked
        
        
        if (!DrawCards.cards.isEmpty())
            {
                final Card tempCard = DrawCards.drawFromPlayerDeck();
                final JLabel tempHandSlot = new JLabel();
                PlayerDeck.addCardToHand(tempCard, tempHandSlot);
                tempHandSlot.addMouseListener(new java.awt.event.MouseListener() {

                public void mouseClicked(MouseEvent me) {
                    System.out.println("There was a click");
                    JLabel tempTableSlot = new JLabel();
                    tempTableSlot.setIcon(new ImageIcon(tempCard.getImage()));
                    player_1_tableCards.add(tempCard);
                    tableCardsPanel.add(tempTableSlot, BorderLayout.NORTH);
                    tableCardsPanel.validate();
                    tableCardsScrollPane.validate();
                    PlayerDeck.removeCardFromHand(tempCard, tempHandSlot);
                }
                public void mousePressed(MouseEvent me) {}
                public void mouseReleased(MouseEvent me) {}
                public void mouseEntered(MouseEvent me) {}
                public void mouseExited(MouseEvent me) {}
                });
                updateHandCards(tempHandSlot);
            }
        if (DrawCards.player_1_deck.isEmpty())
            playerDeckLabel.setIcon(playerDeckEmpty);

    }//GEN-LAST:event_playerDeckLabelMouseClicked

    private void drawCardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCardBtnActionPerformed
        final Card tempCard = DrawCards.drawFromPlayerDeck();
        final JLabel tempHandSlot = new JLabel();
        PlayerDeck.addCardToHand(tempCard, tempHandSlot);
        tempHandSlot.addMouseListener(new java.awt.event.MouseListener() {

            public void mouseClicked(MouseEvent me) {
                System.out.println("There was a click");
                JLabel tempTableSlot = new JLabel();
                tempTableSlot.setIcon(new ImageIcon(tempCard.getImage()));
                player_1_tableCards.add(tempCard);
                tableCardsPanel.add(tempTableSlot, BorderLayout.NORTH);
                tableCardsPanel.validate();
                tableCardsScrollPane.validate();
                PlayerDeck.removeCardFromHand(tempCard, tempHandSlot);
            }
            public void mousePressed(MouseEvent me) {}
            public void mouseReleased(MouseEvent me) {}
            public void mouseEntered(MouseEvent me) {}
            public void mouseExited(MouseEvent me) {}
    });
        updateHandCards(tempHandSlot);
    }//GEN-LAST:event_drawCardBtnActionPerformed

    private void addToLineupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToLineupBtnActionPerformed
        
    }//GEN-LAST:event_addToLineupBtnActionPerformed

    private void moveTableCardsToDiscardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTableCardsToDiscardBtnActionPerformed
        
    }//GEN-LAST:event_moveTableCardsToDiscardBtnActionPerformed
    
    private Card drawAndChangeLineupCard(Card card, JLabel slot, Card drawDeck)
    {
        card = drawDeck;
        slot.setIcon(new ImageIcon(card.getImage()));
        slot.setToolTipText(card.getCardText());
        return card;
    }
    
    private void checkForEmptyCard(ArrayList<Card> deck, JLabel slot, ImageIcon image, String message, String title)
    {
        if (deck.isEmpty())
        {
            slot.setIcon(image);
            JOptionPane.showMessageDialog(null, message, title, JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    private Card buyLineupCard(Card card, JLabel lineupSlot, JLabel discardSlot, ImageIcon image)
    {
        PlayerDeck.addCardToDiscard(card);
        lineupSlot.setIcon(image);
        discardSlot.setIcon(new ImageIcon(card.getImage()));
        discardSlot.setToolTipText(card.getCardText());
        card = noCard;
        return card;
    }
    
    private void buyKickOrWeakness(Card card, JLabel slot)
    {
        PlayerDeck.addCardToDiscard(card);
        slot.setIcon(new ImageIcon(card.getImage()));
        slot.setToolTipText(card.getCardText());
    }
    
    private void updateHandCards(JLabel tempSlot)
    {
        playerHandPanel.add(tempSlot);
        playerHandPanel.validate();
        playerHandScrollPane.validate();
        JScrollBar horizontal = playerHandScrollPane.getHorizontalScrollBar();
        horizontal.setValue(horizontal.getMaximum());
    }
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DCCardGameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DCCardGameForm().setVisible(true);
            }
        });
        
        
                
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToLineupBtn;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel currentPowerLabel;
    public static javax.swing.JTextField currentPowerTextBox;
    private javax.swing.JButton deckPeekBtn;
    private javax.swing.JLabel deckScoreLabel;
    public static javax.swing.JTextField deckScoreTextBox;
    private javax.swing.JButton destroyCardBtn;
    private javax.swing.JButton discardCardBtn;
    private javax.swing.JButton discardHandBtn;
    private javax.swing.JLabel discardsLabel;
    private javax.swing.JPanel discardsPanel;
    private javax.swing.JButton drawCardBtn;
    private javax.swing.JButton drawWeaknessBtn;
    private javax.swing.JMenuItem exitGameMenuItem;
    private javax.swing.JPanel extraLineupPanel;
    private javax.swing.JScrollPane extraLineupScrollPane;
    private javax.swing.JLabel extraLineupSlot1Label;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem infiniteKicksCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem infiniteWeaknessCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem instantRefillCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem instantVillainCheckBoxMenuItem;
    private javax.swing.JLabel kickDeckLabel;
    private javax.swing.JPanel kickDeckMainPanel;
    private javax.swing.JPanel kickDeckPanel;
    private javax.swing.JPanel lineupPanel;
    private javax.swing.JLabel lineupSlot1Label;
    private javax.swing.JPanel lineupSlot1Panel;
    private javax.swing.JLabel lineupSlot2Label;
    private javax.swing.JPanel lineupSlot2Panel;
    private javax.swing.JLabel lineupSlot3Label;
    private javax.swing.JPanel lineupSlot3Panel;
    private javax.swing.JLabel lineupSlot4Label;
    private javax.swing.JPanel lineupSlot4Panel;
    private javax.swing.JLabel lineupSlot5Label;
    private javax.swing.JPanel lineupSlot5Panel;
    private javax.swing.JButton mainDeckDrawBtn;
    private javax.swing.JLabel mainDeckLabel;
    private javax.swing.JPanel mainDeckMainPanel;
    private javax.swing.JPanel mainDeckPanel;
    private javax.swing.JButton mainDeckPeekBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveTableCardsToDiscardBtn;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JLabel playerDeckLabel;
    private javax.swing.JPanel playerDeckMainPanel;
    private javax.swing.JPanel playerDeckPanel;
    private javax.swing.JPanel playerHandMainPanel;
    public static javax.swing.JPanel playerHandPanel;
    public static javax.swing.JScrollPane playerHandScrollPane;
    private javax.swing.JButton printDeckBtn;
    private javax.swing.JButton printDiscardsBtn;
    private javax.swing.JMenu rulesMenu;
    private javax.swing.JButton searchDiscardsBtn;
    private javax.swing.JCheckBoxMenuItem standardRulesCheckBoxMenuItem;
    private javax.swing.JPanel superHeroMainPanel;
    private javax.swing.JPanel superHeroPanel;
    private javax.swing.JLabel superHeroSlotLabel;
    private javax.swing.JLabel superVillainDeckLabel;
    private javax.swing.JPanel superVillainDeckMainPanel;
    private javax.swing.JPanel superVillainDeckPanel;
    private javax.swing.JPanel tableCardsMainPanel;
    private javax.swing.JPanel tableCardsPanel;
    private javax.swing.JScrollPane tableCardsScrollPane;
    private javax.swing.JCheckBoxMenuItem twoSuperHeroesCheckBoxMenuItem;
    // End of variables declaration//GEN-END:variables

}
